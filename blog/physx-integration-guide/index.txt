1:HL["/_next/static/css/92c5c572fa451d95.css","style",{"crossOrigin":""}]
0:["b4wKCJ_OP9rUcyO_ZSaBt",[[["",{"children":["blog",{"children":["physx-integration-guide",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/92c5c572fa451d95.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[6954,[],""]
5:I[7264,[],""]
7:I[5846,["350","static/chunks/350-cb3df608d45f4628.js","752","static/chunks/app/blog/physx-integration-guide/page-2ab526a7fbdfae14.js"],""]
8:I[8326,["350","static/chunks/350-cb3df608d45f4628.js","752","static/chunks/app/blog/physx-integration-guide/page-2ab526a7fbdfae14.js"],""]
9:I[4946,["350","static/chunks/350-cb3df608d45f4628.js","752","static/chunks/app/blog/physx-integration-guide/page-2ab526a7fbdfae14.js"],""]
a:T766,#include <PxPhysicsAPI.h>

class PhysicsEngine {
private:
    physx::PxDefaultAllocator m_allocator;
    physx::PxDefaultErrorCallback m_errorCallback;
    physx::PxFoundation* m_foundation;
    physx::PxPhysics* m_physics;
    physx::PxDefaultCpuDispatcher* m_dispatcher;
    physx::PxScene* m_scene;
    physx::PxMaterial* m_material;

public:
    bool Initialize() {
        // 创建Foundation
        m_foundation = PxCreateFoundation(PX_PHYSICS_VERSION,
                                        m_allocator, m_errorCallback);
        if (!m_foundation) {
            return false;
        }

        // 创建Physics对象
        m_physics = PxCreatePhysics(PX_PHYSICS_VERSION, *m_foundation,
                                   physx::PxTolerancesScale(), true);
        if (!m_physics) {
            return false;
        }

        // 创建场景描述
        physx::PxSceneDesc sceneDesc(m_physics->getTolerancesScale());
        sceneDesc.gravity = physx::PxVec3(0.0f, -9.81f, 0.0f);

        m_dispatcher = physx::PxDefaultCpuDispatcherCreate(2);
        sceneDesc.cpuDispatcher = m_dispatcher;
        sceneDesc.filterShader = physx::PxDefaultSimulationFilterShader;

        // 创建场景
        m_scene = m_physics->createScene(sceneDesc);
        if (!m_scene) {
            return false;
        }

        // 创建默认材质
        m_material = m_physics->createMaterial(0.5f, 0.5f, 0.6f);

        return true;
    }

    void Cleanup() {
        if (m_scene) {
            m_scene->release();
            m_scene = nullptr;
        }
        if (m_dispatcher) {
            m_dispatcher->release();
            m_dispatcher = nullptr;
        }
        if (m_physics) {
            m_physics->release();
            m_physics = nullptr;
        }
        if (m_foundation) {
            m_foundation->release();
            m_foundation = nullptr;
        }
    }
};b:T78b,// 创建静态刚体（地面）
physx::PxRigidStatic* CreateStaticBox(const physx::PxVec3& position, 
                                      const physx::PxVec3& dimensions) {
    physx::PxTransform transform(position);
    physx::PxRigidStatic* staticActor = m_physics->createRigidStatic(transform);
    
    physx::PxShape* shape = physx::PxRigidActorExt::createExclusiveShape(
        *staticActor, 
        physx::PxBoxGeometry(dimensions), 
        *m_material
    );
    
    m_scene->addActor(*staticActor);
    return staticActor;
}

// 创建动态刚体（可移动物体）
physx::PxRigidDynamic* CreateDynamicBox(const physx::PxVec3& position, 
                                       const physx::PxVec3& dimensions, 
                                       float density = 1.0f) {
    physx::PxTransform transform(position);
    physx::PxRigidDynamic* dynamicActor = m_physics->createRigidDynamic(transform);
    
    physx::PxShape* shape = physx::PxRigidActorExt::createExclusiveShape(
        *dynamicActor, 
        physx::PxBoxGeometry(dimensions), 
        *m_material
    );
    
    // 设置质量属性
    physx::PxRigidBodyExt::updateMassAndInertia(*dynamicActor, density);
    
    m_scene->addActor(*dynamicActor);
    return dynamicActor;
}

// 创建球体
physx::PxRigidDynamic* CreateDynamicSphere(const physx::PxVec3& position, 
                                          float radius, 
                                          float density = 1.0f) {
    physx::PxTransform transform(position);
    physx::PxRigidDynamic* dynamicActor = m_physics->createRigidDynamic(transform);
    
    physx::PxShape* shape = physx::PxRigidActorExt::createExclusiveShape(
        *dynamicActor, 
        physx::PxSphereGeometry(radius), 
        *m_material
    );
    
    physx::PxRigidBodyExt::updateMassAndInertia(*dynamicActor, density);
    
    m_scene->addActor(*dynamicActor);
    return dynamicActor;
}c:T482,class PhysicsEngine {
private:
    float m_accumulator = 0.0f;
    float m_stepSize = 1.0f / 60.0f;  // 60 FPS

public:
    void Update(float deltaTime) {
        m_accumulator += deltaTime;
        
        // 固定时间步长更新
        while (m_accumulator >= m_stepSize) {
            m_scene->simulate(m_stepSize);
            m_scene->fetchResults(true);
            m_accumulator -= m_stepSize;
        }
    }
    
    // 获取刚体变换矩阵
    DirectX::XMMATRIX GetActorTransform(physx::PxRigidActor* actor) {
        physx::PxTransform transform = actor->getGlobalPose();
        
        // 转换为DirectX矩阵
        DirectX::XMVECTOR position = DirectX::XMVectorSet(
            transform.p.x, transform.p.y, transform.p.z, 1.0f);
        DirectX::XMVECTOR rotation = DirectX::XMVectorSet(
            transform.q.x, transform.q.y, transform.q.z, transform.q.w);
        
        DirectX::XMMATRIX translationMatrix = DirectX::XMMatrixTranslationFromVector(position);
        DirectX::XMMATRIX rotationMatrix = DirectX::XMMatrixRotationQuaternion(rotation);
        
        return rotationMatrix * translationMatrix;
    }
};d:T712,// 碰撞回调类
class CollisionCallback : public physx::PxSimulationEventCallback {
public:
    void onConstraintBreak(physx::PxConstraintInfo* constraints, physx::PxU32 count) override {}
    void onWake(physx::PxActor** actors, physx::PxU32 count) override {}
    void onSleep(physx::PxActor** actors, physx::PxU32 count) override {}
    void onTrigger(physx::PxTriggerPair* pairs, physx::PxU32 count) override {}
    void onAdvance(const physx::PxRigidBody*const* bodyBuffer, const physx::PxTransform* poseBuffer, const physx::PxU32 count) override {}
    
    void onContact(const physx::PxContactPairHeader& pairHeader, 
                   const physx::PxContactPair* pairs, 
                   physx::PxU32 nbPairs) override {
        for (physx::PxU32 i = 0; i < nbPairs; i++) {
            const physx::PxContactPair& cp = pairs[i];
            
            if (cp.events & physx::PxPairFlag::eNOTIFY_TOUCH_FOUND) {
                // 碰撞开始
                OnCollisionEnter(pairHeader.actors[0], pairHeader.actors[1]);
            }
            
            if (cp.events & physx::PxPairFlag::eNOTIFY_TOUCH_LOST) {
                // 碰撞结束
                OnCollisionExit(pairHeader.actors[0], pairHeader.actors[1]);
            }
        }
    }
    
private:
    void OnCollisionEnter(physx::PxRigidActor* actor1, physx::PxRigidActor* actor2) {
        // 处理碰撞开始事件
        std::cout << "Collision Enter!" << std::endl;
    }
    
    void OnCollisionExit(physx::PxRigidActor* actor1, physx::PxRigidActor* actor2) {
        // 处理碰撞结束事件
        std::cout << "Collision Exit!" << std::endl;
    }
};

// 在场景创建时设置回调
CollisionCallback* collisionCallback = new CollisionCallback();
m_scene->setSimulationEventCallback(collisionCallback);2:[null,["$","html",null,{"lang":"zh-CN","children":["$","body",null,{"children":["$","div",null,{"className":"min-h-screen","children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","physx-integration-guide","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L6",[["$","$L7",null,{}],["$","main",null,{"className":"min-h-screen","children":[["$","section",null,{"className":"bg-black/40 border-b border-white/10 py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","div",null,{"className":"mb-8","children":["$","$L8",null,{"href":"/blog","className":"inline-flex items-center text-gray-200 hover:text-white transition-colors","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":20,"height":20,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"mr-2","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"返回博客列表"]}]}],["$","div",null,{"className":"mb-4","children":["$","span",null,{"className":"inline-block bg-white/10 text-gray-200 px-3 py-1 rounded-full text-sm font-medium","children":"PhysX"}]}],["$","h1",null,{"className":"text-4xl font-bold text-white mb-6","children":"PhysX物理引擎集成实战"}],["$","div",null,{"className":"flex items-center space-x-6 text-gray-400 mb-8","children":[["$","div",null,{"className":"flex items-center space-x-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":18,"height":18,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-user","children":[["$","path","975kel",{"d":"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"}],["$","circle","17ys0d",{"cx":"12","cy":"7","r":"4"}],"$undefined"]}],["$","span",null,{"children":"HGL"}]]}],["$","div",null,{"className":"flex items-center space-x-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":18,"height":18,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"2024年1月10日"}]]}],["$","div",null,{"className":"flex items-center space-x-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":18,"height":18,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],["$","span",null,{"children":"12分钟阅读"}]]}]]}],["$","div",null,{"className":"flex items-center space-x-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":18,"height":18,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"text-gray-400","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex space-x-2","children":[["$","span","PhysX",{"className":"bg-white/10 text-gray-200 px-3 py-1 rounded-full text-sm","children":"PhysX"}],["$","span","物理引擎",{"className":"bg-white/10 text-gray-200 px-3 py-1 rounded-full text-sm","children":"物理引擎"}],["$","span","碰撞检测",{"className":"bg-white/10 text-gray-200 px-3 py-1 rounded-full text-sm","children":"碰撞检测"}]]}]]}]]}]}],["$","section",null,{"className":"py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"bg-black/40 rounded-3xl shadow-lg border border-white/10 p-8 glass-highlight glass-noise","children":["$","div",null,{"className":"prose max-w-none","children":[["$","h2",null,{"children":"PhysX物理引擎简介"}],["$","p",null,{"children":"PhysX是NVIDIA开发的实时物理引擎，广泛应用于游戏开发中。它提供了刚体动力学、 软体模拟、流体模拟、布料模拟等丰富的物理效果。本文将详细介绍如何在自研游戏引擎中集成PhysX。"}],["$","h3",null,{"children":"环境配置"}],["$","p",null,{"children":"首先需要下载并配置PhysX SDK："}],["$","ol",null,{"children":[["$","li",null,{"children":"从NVIDIA官网下载PhysX SDK"}],["$","li",null,{"children":"解压到项目目录"}],["$","li",null,{"children":"配置Visual Studio项目设置"}]]}],["$","$L9",null,{"code":"// 项目配置示例\n// 包含目录\n$(PhysXSDK)/Include\n$(PhysXSDK)/Include/common\n$(PhysXSDK)/Include/geometry\n$(PhysXSDK)/Include/foundation\n\n// 库目录\n$(PhysXSDK)/Lib/$(Platform)/$(Configuration)\n\n// 链接库\nPhysX_64.lib\nPhysXCommon_64.lib\nPhysXFoundation_64.lib\nPhysXExtensions_64.lib","language":"cpp","title":"PhysX项目配置"}],["$","h3",null,{"children":"PhysX初始化"}],["$","p",null,{"children":"创建PhysX的基础组件："}],["$","$L9",null,{"code":"$a","language":"cpp","title":"PhysX引擎初始化","showLineNumbers":true}],["$","h3",null,{"children":"创建刚体"}],["$","p",null,{"children":"PhysX中的刚体分为静态刚体和动态刚体："}],["$","pre",null,{"children":["$","code",null,{"children":"$b"}]}],["$","h3",null,{"children":"物理模拟更新"}],["$","p",null,{"children":"在游戏主循环中更新物理模拟："}],["$","pre",null,{"children":["$","code",null,{"children":"$c"}]}],["$","h3",null,{"children":"碰撞检测"}],["$","p",null,{"children":"PhysX提供了强大的碰撞检测功能："}],["$","pre",null,{"children":["$","code",null,{"children":"$d"}]}],["$","h3",null,{"children":"射线检测"}],["$","p",null,{"children":"射线检测在游戏中非常有用，比如鼠标拾取、武器射击等："}],["$","pre",null,{"children":["$","code",null,{"children":"// 射线检测\nbool Raycast(const physx::PxVec3& origin, \n             const physx::PxVec3& direction, \n             float maxDistance,\n             physx::PxRaycastHit& hit) {\n    physx::PxRaycastBuffer hitBuffer;\n    \n    bool hasHit = m_scene->raycast(origin, direction, maxDistance, hitBuffer);\n    \n    if (hasHit) {\n        hit = hitBuffer.block;\n        return true;\n    }\n    \n    return false;\n}\n\n// 使用示例\nphysx::PxVec3 rayOrigin(0, 10, 0);\nphysx::PxVec3 rayDirection(0, -1, 0);  // 向下\nphysx::PxRaycastHit hit;\n\nif (Raycast(rayOrigin, rayDirection, 20.0f, hit)) {\n    std::cout << \"Hit position: \" << hit.position.x << \", \" \n              << hit.position.y << \", \" << hit.position.z << std::endl;\n    std::cout << \"Hit distance: \" << hit.distance << std::endl;\n}"}]}],["$","h3",null,{"children":"性能优化建议"}],["$","p",null,{"children":"在使用PhysX时，需要注意以下性能优化点："}],["$","h4",null,{"children":"1. 合理设置物理更新频率"}],["$","p",null,{"children":"物理模拟不需要与渲染频率相同，通常60Hz就足够了。"}],["$","h4",null,{"children":"2. 使用简化的碰撞形状"}],["$","p",null,{"children":"尽量使用基本几何形状（盒子、球体、胶囊）而不是复杂的网格。"}],["$","h4",null,{"children":"3. 合理管理活跃对象"}],["$","p",null,{"children":"让不需要模拟的对象进入睡眠状态，减少计算负担。"}],["$","pre",null,{"children":["$","code",null,{"children":"// 设置睡眠阈值\ndynamicActor->setSleepThreshold(0.5f);\ndynamicActor->setStabilizationThreshold(0.1f);\n\n// 手动让对象睡眠\ndynamicActor->putToSleep();\n\n// 唤醒对象\ndynamicActor->wakeUp();"}]}],["$","h3",null,{"children":"与渲染系统的集成"}],["$","p",null,{"children":"物理引擎需要与渲染系统紧密配合："}],["$","pre",null,{"children":["$","code",null,{"children":"class GameObject {\nprivate:\n    physx::PxRigidActor* m_physicsActor;\n    // 渲染相关数据\n    Mesh* m_mesh;\n    Material* m_material;\n    \npublic:\n    void Update() {\n        if (m_physicsActor) {\n            // 从物理引擎获取变换矩阵\n            DirectX::XMMATRIX worldMatrix = GetPhysicsTransform();\n            \n            // 更新渲染变换\n            UpdateRenderTransform(worldMatrix);\n        }\n    }\n    \n    void Render(ID3D11DeviceContext* context) {\n        // 使用更新后的变换矩阵进行渲染\n        // ...\n    }\n};"}]}],["$","h3",null,{"children":"总结"}],["$","p",null,{"children":"PhysX为游戏开发提供了强大的物理模拟能力。通过合理的集成和优化， 可以为游戏带来逼真的物理效果。在实际项目中，还需要考虑多线程、 内存管理、调试工具等更多方面的问题。"}],["$","p",null,{"children":"掌握PhysX的使用不仅能提升游戏的真实感，也是现代游戏引擎开发的必备技能。 建议在学习过程中多做实验，理解各种参数对物理效果的影响。"}]]}]}]}]}],["$","section",null,{"className":"py-8 bg-black/40 border-t border-white/10","children":["$","div",null,{"className":"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"flex justify-between items-center","children":[["$","div",null,{"children":["$","$L8",null,{"href":"/blog/hlsl-shader-programming","className":"text-gray-200 hover:text-white transition-colors","children":"← 上一篇：HLSL着色器编程技巧"}]}],["$","div",null,{"children":["$","$L8",null,{"href":"/blog/directx11-rendering-pipeline","className":"text-gray-200 hover:text-white transition-colors","children":"下一篇：DirectX 11渲染管线深度解析 →"}]}]]}]}]}]]}],["$","footer",null,{"className":"bg-gray-900 border-t border-gray-700 mt-12","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-sm text-gray-400","children":["© ",2025," HGL博客 - 专注于游戏引擎开发技术分享"]}],["$","div",null,{"className":"mt-2 flex justify-center space-x-4","children":[["$","a",null,{"href":"https://github.com/hgl-pong","className":"text-gray-400 hover:text-white transition-colors text-sm","target":"_blank","rel":"noopener noreferrer","children":"GitHub"}],["$","span",null,{"className":"text-gray-600","children":"•"}],["$","a",null,{"href":"mailto:contact@example.com","className":"text-gray-400 hover:text-white transition-colors text-sm","children":"联系邮箱"}]]}]]}]}]}]],null],"segment":"__PAGE__"},"styles":null}],"segment":"physx-integration-guide"},"styles":null}],"segment":"blog"},"styles":null}]}]}]}],null]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"HGL博客 - DirectX与PhysX游戏引擎开发"}],["$","meta","3",{"name":"description","content":"专注DirectX 11图形编程、PhysX物理引擎和C++游戏引擎开发技术分享，记录底层引擎开发心得"}],["$","meta","4",{"name":"author","content":"HGL"}],["$","meta","5",{"name":"keywords","content":"游戏引擎, DirectX 11, PhysX, C++, HLSL, 图形编程, 物理引擎, 游戏开发"}],["$","meta","6",{"property":"og:title","content":"HGL博客 - DirectX与PhysX游戏引擎开发"}],["$","meta","7",{"property":"og:description","content":"专注DirectX 11图形编程、PhysX物理引擎和C++游戏引擎开发技术分享，记录底层引擎开发心得"}],["$","meta","8",{"property":"og:url","content":"https://hgl-pong.github.io/"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary"}],["$","meta","11",{"name":"twitter:title","content":"HGL博客 - DirectX与PhysX游戏引擎开发"}],["$","meta","12",{"name":"twitter:description","content":"专注DirectX 11图形编程、PhysX物理引擎和C++游戏引擎开发技术分享，记录底层引擎开发心得"}],["$","link","13",{"rel":"icon","href":"/icon.ico?566750784894397f","type":"image/x-icon","sizes":"64x64"}]]
6:null
